reference : https://docs.oracle.com/javase/tutorial/collections/streams/index.html

Aggregate Functions:
------------------
------------------ ------------------ ------------------

1) forEach:
----------

example :

for (Person p : roster) {
    System.out.println(p.getName());
}

now,

roster.stream()
    .forEach(e -> System.out.println(e.getName());

------------------ ------------------ ------------------
    Pipelines and Streams
    ----------------------
    
    Pipelines:
    ----------
    A pipeline is a sequence of aggregate operations.
    
    example 1:
    
    for (Person p : roster) {
        if (p.getGender() == Person.Sex.MALE) {
            System.out.println(p.getName());
        }
    }
    
    now,
    
    roster
    .stream()
    .filter(e -> e.getGender() == Person.Sex.MALE)
    .forEach(e -> System.out.println(e.getName()));
    
    
    Streams:
    --------
    A stream is a sequence of elements. 
    It is not a data structure that stores elements. Instead, a stream carries values from a source through a pipeline.
    The filter operation returns a new stream that contains elements that match its predicate (this operation's parameter). 
    In this example, the predicate is the lambda expression (e -> e.getGender() == Person.Sex.MALE). 
    It returns the boolean value true if the gender field of object e has the value Person.Sex.MALE.
    
    example 2:
    The example calculates the average age of all male members contained in the collection roster with a pipeline that consists of the aggregate operations filter, mapToInt, and average
    double average = roster
                        .stream()
                        .filter(p -> p.getGender() == Person.Sex.MALE)
                        .mapToInt(Person::getAge)                       //returns IntStream(stream of int values), of all ages
                        .average()
                        .getAsDouble();
                        
                        
    (Person::getAge) is equivalent to lambda function, (e->e.getAge())
    The mapToInt operation returns a new stream of type IntStream (which is a stream that contains only integer values).
        --------- 
    
    
    Differences Between Aggregate Operations and Iterators:
    ------------------------------------------------------
    - Aggregate operations process elements from a stream, not directly from a collection. Consequently, they are also called stream operations.
    - Aggregate operations do not contain a method like next to instruct them to process the next element of the collection.
    - With internal delegation, your application determines what collection it iterates, 
      but the JDK determines how to iterate the collection. 
      With external iteration, your application determines both what collection it iterates and how it iterates it. 
      However, external iteration can only iterate over the elements of a collection sequentially. Internal iteration does not have this limitation.
    
    
    
------------------ ------------------ ------------------
    Reduction
    ---------
    
    
    